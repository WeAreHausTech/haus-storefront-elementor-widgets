name: Build and Release Widget

on:
  workflow_dispatch:
    inputs:
      widget:
        description: 'Widget to release (e.g., add-to-cart-button or widgets-core)'
        required: true
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
  push:
    tags:
      - "*" 

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract widget and version from tag
        if: ${{ github.event_name == 'push' }}
        id: extract
        run: |
          TAG_NAME=${{ github.ref_name }}
          WIDGET=$(echo "$TAG_NAME" | cut -d'@' -f1)
          VERSION=$(echo "$TAG_NAME" | cut -d'@' -f2)
          echo "widget=$WIDGET" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Debug extracted values
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "Widget: ${{ env.widget }}"
          echo "Version: ${{ env.version }}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Build and package the widget
        run: |
          npx nx run ${{ github.event.inputs.widget || env.widget }}:package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.widget || env.widget }}-${{ github.event.inputs.version || env.version }}
          name: ${{ github.event.inputs.widget || env.widget }}-${{ github.event.inputs.version || env.version }}
          files: dist/libs/${{ github.event.inputs.widget || env.widget }}/${{ github.event.inputs.widget || env.widget }}-${{ github.event.inputs.version || env.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update packages.json
        if: ${{ github.event_name == 'push' }}
        run: |
          TAG_NAME=${{ github.ref_name }}
          WIDGET=$(echo "$TAG_NAME" | cut -d':' -f1)
          VERSION=$(echo "$TAG_NAME" | cut -d':' -f2)

          # Path to packages.json
          PACKAGES_JSON=packages/packages.json

          # Extract the dist URL for the new release
          DIST_URL="https://github.com/WeAreHausTech/haus-storefront-elementor-widgets/releases/download/${TAG_NAME}/${WIDGET}-${VERSION}.zip"

          # Update packages.json with the new release
          jq ".packages[\"haus-storefront-elementor-widgets/${WIDGET}\"] += { \"${VERSION}\": { \"name\": \"haus-storefront-elementor-widgets/${WIDGET}\", \"version\": \"${VERSION}\", \"source\": { \"url\": \"https://github.com/WeAreHausTech/haus-storefront-elementor-widgets.git\", \"type\": \"git\", \"reference\": \"${TAG_NAME}\" }, \"dist\": { \"url\": \"${DIST_URL}\", \"type\": \"zip\" }, \"require\": { \"php\": \"^8.1\" }, \"autoload\": { \"psr-4\": { \"HausStorefrontElementorWidgets\\\\\": \"src/\" } } } }" $PACKAGES_JSON > tmp.json && mv tmp.json $PACKAGES_JSON

          # Commit and push the updated packages.json
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $PACKAGES_JSON
          git commit -m "chore: update packages.json for ${WIDGET}:${VERSION}"
          git push